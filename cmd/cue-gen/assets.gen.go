// Code generated by go-bindata. DO NOT EDIT.
// sources:
// doc.cue (3.143kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docCue = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x51\x8f\xdb\xb8\x11\x7e\xb6\x7e\xc5\x54\x77\x0f\x6d\xe1\xca\x49\xde\xea\xe2\xb0\xd8\x6e\xb2\xad\xd1\x60\x5d\xac\x37\x3d\x1c\xae\x57\x60\x4c\x8d\xa4\xb9\x50\x24\x43\x52\xf6\x1a\xbd\xf4\xb7\x17\x43\x4a\xb2\x76\xdb\xc7\x76\x81\x00\x31\x39\xf3\x71\xf8\x7d\xdf\x0c\xb5\xd9\xc0\x9d\x75\x17\xcf\x6d\x17\xe1\xdd\x9b\xb7\xbf\x87\x5d\x88\x6c\xe1\x76\x88\x9d\xf5\xa1\xd8\x6c\x8a\xcd\x06\x3e\xb2\x22\x13\xa8\x86\xc1\xd4\xe4\x21\x76\x04\xb7\x0e\x55\x47\xd3\xce\x1a\xfe\x46\x3e\xb0\x35\xf0\xae\x7a\x03\xbf\x96\x80\x72\xdc\x2a\x7f\xf3\x07\x81\xb8\xd8\x01\x7a\xbc\x80\xb1\x11\x86\x40\x10\x3b\x0e\xd0\xb0\x26\xa0\x67\x45\x2e\x02\x1b\x50\xb6\x77\x9a\xd1\x28\x82\x33\xc7\x2e\x9d\x33\xa2\x54\x82\xf1\xc3\x88\x61\x8f\x11\xd9\x00\x82\xb2\xee\x02\xb6\x59\x06\x02\xc6\xb1\x68\xf9\xeb\x62\x74\xdb\xcd\xe6\x7c\x3e\x57\x98\x0a\xae\xac\x6f\x37\x3a\x87\x86\xcd\xc7\xdd\xdd\x87\x87\xc3\x87\xdf\xbd\xab\xde\x8c\x49\x9f\x8c\xa6\x10\xc0\xd3\x97\x81\x3d\xd5\x70\xbc\x00\x3a\xa7\x59\xe1\x51\x13\x68\x3c\x83\xf5\x80\xad\x27\xaa\x21\x5a\x29\xfa\xec\x39\xb2\x69\xd7\x10\x6c\x13\xcf\xe8\x49\x60\x6a\x0e\xd1\xf3\x71\x88\x2f\x38\x9b\x4a\xe4\xf0\x22\xc0\x1a\x40\x03\xe5\xed\x01\x76\x87\x12\xfe\x78\x7b\xd8\x1d\xd6\x02\xf2\xfd\xee\xe9\xcf\xfb\x4f\x4f\xf0\xfd\xed\xe3\xe3\xed\xc3\xd3\xee\xc3\x01\xf6\x8f\x70\xb7\x7f\x78\xbf\x7b\xda\xed\x1f\x0e\xb0\xbf\x87\xdb\x87\x1f\xe0\x2f\xbb\x87\xf7\x6b\x20\x8e\x1d\x79\xa0\x67\xe7\xe5\x06\xd6\x03\x0b\x9b\x54\x27\xea\x0e\x44\x2f\x4a\x68\x6c\x2e\x29\x38\x52\xdc\xb0\x02\x8d\xa6\x1d\xb0\x25\x68\xed\x89\xbc\x61\xd3\x82\x23\xdf\x73\x10\x55\x03\xa0\xa9\x05\x46\x73\xcf\x11\x63\x5a\xfa\x8f\x7b\x55\x85\x84\x3c\xcd\xc2\xd6\x14\x94\xe7\x23\x85\x14\x84\x27\x64\x9d\x58\x6c\x98\x74\x1d\xe6\x12\x5a\x32\xd6\x21\x83\xb2\xa6\xe1\x76\xf0\x09\x3e\x21\xa4\xca\xf7\x4e\x7e\xa3\x9e\xd2\xd0\x13\xb0\xa9\x59\xa1\x70\x97\x7c\x82\xf0\x65\xa0\x90\xd2\x7a\xf4\x9f\x73\x1d\xbd\xad\x07\x4d\xa0\xac\xf7\x14\x9c\x35\x75\x10\xc1\xe4\xc0\x3f\x59\x61\xe7\xee\xd3\x87\x29\xc6\x36\x80\xe0\xc9\xd9\xc0\xd1\xfa\xcb\x1a\xce\x1d\xab\x4e\x64\x8a\xdd\x28\xa7\x27\x25\x5b\xe0\x3c\x35\xfc\x2c\x0e\x4e\xde\x70\xa8\x3e\x63\x4b\x21\xd5\xc1\x26\xc1\x8f\xa0\xe2\x8e\xde\x59\x1f\x81\x50\x75\x60\x45\x9d\x74\xa1\x7b\x2b\x2a\x61\xef\x34\xad\x13\x09\x2d\xc7\x6e\x38\x56\xca\xf6\x1b\x96\x5b\x6c\xd0\xf1\x7a\x09\xc5\x01\xca\xb4\x53\xe5\xcd\xb2\x2a\xf2\xce\x16\xc4\x45\xa6\x2d\x0a\xeb\xc8\xa0\xe3\x9b\x2d\xfc\xb3\x58\x6d\x36\x10\x48\x37\x77\xd6\x48\x9f\x50\x3d\xa9\x2c\x75\x76\x94\x6c\x82\x5a\x83\xa7\x86\x3c\x19\x45\x01\x42\x67\x07\x5d\xc3\x51\xa8\x55\x7a\xa8\x47\x66\xd9\x24\x30\x29\x65\xef\xc8\xdc\xfe\x75\x07\x76\x88\x6e\x88\x6b\xf0\xa4\x06\x1f\xf8\x44\xfa\x52\x15\xab\x17\xc7\x6d\xe1\x68\xad\x86\x5f\xe0\xb7\x0d\xea\x40\x45\xc2\x48\xea\xdd\xb3\x8e\xe4\xa1\xa6\x86\x0d\x85\x44\x7a\x3b\x68\x9c\x5d\x2b\x0a\x8a\x18\x7a\x56\x3b\x5a\xb0\x3d\x47\x68\xbc\xed\x93\x1a\x82\x95\x6b\xa8\x60\x17\x85\x1a\x6b\xf4\x45\x52\xec\x39\xf7\x64\x93\x0f\x99\x00\x3a\x8c\x80\x75\x2d\xff\x38\x3b\x29\x61\x28\x6b\x42\xf4\xc8\x26\x86\x0a\xee\x17\xb1\x93\xb7\xe0\x88\x81\x15\xc4\x8b\xa3\x00\x0a\x8d\x0c\xae\x23\x81\xa7\xde\x9e\xa8\x1e\x0f\x4f\x50\x68\x80\xbc\xb7\x3e\x89\x19\x06\xd5\x2d\x8a\x3f\xa6\xf9\x96\x19\x3d\x5e\xe6\xa9\x17\xc5\x0b\x92\x7b\x7f\x35\xf5\x97\x01\xb5\x88\x34\x06\x12\x7b\xd8\x1f\x7f\x26\x15\x53\x0d\x55\xf2\x0d\x9b\x10\x65\x3e\xae\x67\x2e\x7a\x36\xdc\x0f\x7d\x3e\x72\x9a\x85\x41\x75\xd4\x23\xd8\x9c\xce\x61\x81\x8d\x01\x0e\x69\x77\x33\x66\x56\xc5\x6a\xa1\xcd\xcd\xd5\x52\x82\x4e\xcf\x0e\x4d\xfd\x78\x35\x8a\x27\xa7\x31\xff\x67\x5e\xcb\x3d\xa8\xe2\x80\x7a\x3c\x32\xf9\xcc\x48\x67\x93\xb4\xb3\x69\x13\xd8\x64\xa1\x7c\xfe\x24\xdf\x0b\xf6\xd0\xa4\xbe\x3c\xa1\x1e\x52\x07\xa5\x53\x52\x2b\x45\xb1\x18\x70\x33\x1a\x52\x74\x4f\x83\x41\x20\xa4\x1b\xab\x62\xf5\xba\xd8\xd7\x3e\xfc\x3a\xce\x27\x4a\x06\x0b\xa4\x52\xfe\xb5\x37\x02\x45\xa9\x35\x4f\xa6\x6b\xed\x52\x14\xb6\xad\xa7\x56\x5c\x31\x5d\x42\xe6\x53\x91\x4a\xc1\x28\x66\x12\xeb\x87\x0c\x9c\xc9\xcf\x26\xaf\xd3\xd2\x28\xcb\x75\x8c\x90\x89\x9e\x29\x54\x05\x6a\x3d\xf7\xac\x45\xc7\xf7\xac\xc9\x60\x4f\xe3\xf0\x49\xc7\xa4\xdf\x8b\x69\x29\x75\x51\xfd\xaa\x23\xab\x62\xb5\xcc\xdf\xc2\x77\xff\x2a\xab\x9f\x83\x35\xdf\x96\x59\xca\xc8\x51\x46\xdd\x89\xbc\xe7\x7a\x9c\xc9\xdf\xe6\x11\x9d\x89\xc4\x10\xac\xe2\xe5\x54\x9d\xeb\xad\x8a\x55\x4a\x5f\x98\xe3\x94\xdf\x7b\x39\xe7\x9b\xf2\x1f\xa7\xbf\xd7\x55\xf9\x8d\x50\x5d\x9e\xde\xa2\x76\x1d\xbe\x2d\x47\xbe\x27\x10\x61\x58\xe4\x86\x1e\x9d\x10\xb2\x58\x97\x69\xa2\x31\xf2\x89\xa6\x11\xed\xad\x8d\x79\x38\xe6\x51\x1c\xad\x40\x39\x6f\x95\xbc\x6d\xce\xdb\xdc\xe7\xc2\xe0\x02\x67\x0b\x3f\xe6\xfa\x7e\xda\xc2\x8f\x55\x55\x65\x5a\x7b\x5b\x5f\x5f\x8c\x30\x02\x2e\x20\xf2\x3b\x9e\x7a\x54\xde\xf3\x2b\xc1\x33\xb1\xe9\x63\x42\x74\x4c\x7f\x53\xac\x2c\x2c\x60\xc6\x30\x47\x5e\x34\x80\x19\x07\x10\x02\x39\xf4\xaf\xcd\x93\x6e\x97\x9e\x86\x2b\x48\xb1\x92\x62\x6f\xb6\x50\xa2\xd6\x25\xfc\x02\xe5\x08\x37\x6a\x98\x22\xef\x53\xd1\x3d\x9a\x01\xb5\xbe\xcc\xfe\xad\x13\x71\x9a\x43\x14\x76\xff\xfb\xfd\xaa\x62\x75\x85\xb8\xc9\x24\x8d\x8c\x15\xff\x03\x0b\xa6\xa7\x1c\x1d\x27\xa8\x33\x0b\x3f\xac\x3e\x43\xea\x05\x1c\x74\x84\x0c\xdb\xc0\x60\xe6\xaa\x5f\xf9\xf6\xe6\xff\x63\xdc\x9b\x2d\xfc\xea\xbb\x72\x04\x1c\xad\xbb\xe8\x7c\x81\x9c\x56\xe5\xfd\x31\x2f\x94\xaa\xd2\xcc\x98\xee\xb0\x88\xcd\xd3\x3f\x2c\x24\x18\x3f\x01\x16\xdf\x0b\x18\xbb\x6a\xee\x96\x9b\x17\xed\x52\x7c\xfd\xa9\x28\x94\xaf\xe7\x01\x20\xa9\x99\xca\x05\xc2\x38\x3b\xee\x1e\xdf\x8f\xdf\x44\xab\x9a\x5f\x8f\xe9\x45\xe2\xac\xd6\x35\x2f\xa4\x11\x3f\xf3\xbb\x4c\xec\xf1\x39\xbd\x1e\x4b\x3a\x35\x99\x36\x76\x53\x7e\x7e\xca\xaa\x62\xd5\xe3\xf3\xfb\x6b\xd4\xc7\x14\x74\xb3\x05\x36\xb1\xf8\x5a\xfc\x3b\x00\x00\xff\xff\x4e\x77\xf3\x0f\x47\x0c\x00\x00")

func docCueBytes() ([]byte, error) {
	return bindataRead(
		_docCue,
		"doc.cue",
	)
}

func docCue() (*asset, error) {
	bytes, err := docCueBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc.cue", size: 3143, mode: os.FileMode(0644), modTime: time.Unix(1620159621, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0x63, 0x35, 0x35, 0xa8, 0x31, 0x5, 0x18, 0xe8, 0xc4, 0x8e, 0x82, 0xd9, 0x63, 0x48, 0x4b, 0x1e, 0x25, 0x36, 0xda, 0x50, 0xdc, 0x22, 0xb2, 0x76, 0x2c, 0x2a, 0xd2, 0x98, 0x51, 0x20, 0x6c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"doc.cue": docCue,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"doc.cue": {docCue, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
